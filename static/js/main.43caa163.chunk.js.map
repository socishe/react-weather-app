{"version":3,"sources":["components/WeatherDetails.js","components/WeatherList.js","components/SearchForm.js","components/WeatherCard.js","App.js","serviceWorker.js","index.js"],"names":["WeatherDetails","data","units","className","date","undefined","low","high","src","weather","icon","alt","desciption","temp","WeatherList","props","error","length","map","key","SearchForm","state","city","onFormSubmit","event","preventDefault","onSubmit","this","type","placeholder","value","onChange","e","setState","target","Component","API_KEY","WeatherCard","useState","tempUnits","tempSymbol","main","mainTemp","timezone","min","max","currentWeather","setCurrentWeather","setWeather","showRetry","setShowRetry","setError","retrying","setRetrying","remainingTime","setRemainingTime","calcTime","Date","localTime","getTime","localOffset","getTimezoneOffset","shiftedTimezone","toDateString","toTimeString","split","useEffect","keepCalling","URL","axios","get","then","response","minTemp","maxTemp","Math","round","warning","temp_min","temp_max","setTimeout","catch","makeCall","useCallback","Promise","resolve","reject","cod","arr","list","filter","val","dt_txt","matching","forEach","push","toArray","Object","entries","finalData","itemData","itemValue","time","roundTemp","dataCons","loopCall","apiCaller","delay","a","console","log","timer","clearTimeout","converter","celsius","fahrenheit","onValueChange","symbol","calCurrent","changeWeather","objValue","htmlFor","id","checked","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.43caa163.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./WeatherDetails.css\";\r\n\r\nconst WeatherDetails = ({ data, units }) => {\r\n  return (\r\n    <div className=\"main-display\">\r\n      <h1 className=\"date\">{data.date}</h1>\r\n      <div className=\"weather-image\">\r\n        {data.data.low !== undefined && data.data.high === undefined ? (\r\n          <>\r\n            \r\n            <img\r\n              src={`http://openweathermap.org/img/w/${data.data.low.weather.icon}.png`}\r\n              alt={data.data.low.weather.desciption}\r\n            />\r\n          </>\r\n        ) : (\r\n          <>\r\n            <img\r\n              src={`http://openweathermap.org/img/w/${data.data.high.weather.icon}.png`}\r\n              alt={data.data.high.weather.desciption}\r\n            />\r\n          </>\r\n        )}\r\n      </div>\r\n      <div className=\"temeratures\">\r\n        {data.data.low !== undefined && (\r\n          <>Min: {`${data.data.low.temp} ${units}`}</>\r\n        )}\r\n      </div>\r\n      <div className=\"temeratures\">\r\n        {data.data.high !== undefined && (\r\n          <>Max: {`${data.data.high.temp} ${units}`}</>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherDetails;\r\n","import React from \"react\";\r\nimport WeatherDetails from \"./WeatherDetails\";\r\n\r\nconst WeatherList = (props) => {\r\n  const { weather, units, error } = props;\r\n\r\n  return (\r\n    <>\r\n      {weather.length === 0 ? (\r\n        <div>{!error ? \"Loading!\" : \"Failed to load\"}</div>\r\n      ) : (\r\n        <div className=\"list-group\">\r\n          {weather.map((data) => {\r\n            return <WeatherDetails data={data} key={data.date} units={units} />;\r\n          })}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherList;\r\n","import React, { Component } from \"react\";\r\nimport \"./SearchForm.css\";\r\n\r\nclass SearchForm extends Component {\r\n  state = {\r\n    city: \"Cape Town\",\r\n  };\r\n\r\n  onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.onSubmit(this.state.city);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"inline-input\">\r\n        <form onSubmit={this.onFormSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search for a place\"\r\n            value={this.state.city}\r\n            onChange={(e) => this.setState({ city: e.target.value })}\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default SearchForm;\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport \"./WeatherCard.css\";\r\nimport WeatherList from \"./WeatherList\";\r\nimport SearchForm from \"./SearchForm\";\r\nimport axios from \"axios\";\r\n\r\n// import data from \"../JsonData\";\r\nconst API_KEY = \"87c4d0766e312391d63eb4c67ad58131\";\r\n\r\nconst WeatherCard = () => {\r\n  const [state, setState] = useState({\r\n    city: \"Cape Town\",\r\n    tempUnits: \"celsius\",\r\n    tempSymbol: \"°C\",\r\n  });\r\n\r\n  const [currentWeather, setCurrentWeather] = useState({\r\n    icon: \"\",\r\n    main: \"\",\r\n    tempUnits: \"celsius\",\r\n    mainTemp: 0,\r\n    timezone: \"\",\r\n    temp: {\r\n      min: 0,\r\n      max: 0,\r\n    },\r\n  });\r\n\r\n  const [weather, setWeather] = useState([]);\r\n\r\n  const [showRetry, setShowRetry] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [retrying, setRetrying] = useState(false);\r\n  const [remainingTime, setRemainingTime] = useState(0);\r\n\r\n  /**\r\n   * Change to current timezone\r\n   */\r\n  const calcTime = (timezone) => {\r\n    const date = new Date();\r\n    const localTime = date.getTime();\r\n\r\n    const localOffset = date.getTimezoneOffset() * 60000;\r\n    const uct = localTime + localOffset;\r\n    const remoteTime = uct + 1000 * timezone;\r\n\r\n    const shiftedTimezone = new Date(remoteTime);\r\n    return (\r\n      shiftedTimezone.toDateString() +\r\n      \" at \" +\r\n      shiftedTimezone.toTimeString().split(\" \")[0]\r\n    );\r\n  };\r\n\r\n  // Showing warnings for the temperature\r\n  const showWarning = (minTemp, maxTemp) => {\r\n    if (minTemp >= 15 && maxTemp <= 25) {\r\n      return \"Temperatures are warm today\";\r\n    }\r\n    if (minTemp < 15) {\r\n      return \"Morning is cold\";\r\n    }\r\n    if (maxTemp > 25) return \"Maximum temperatures are high\";\r\n  };\r\n\r\n  useEffect(() => {\r\n    const keepCalling = () => {\r\n      const URL = `https://api.openweathermap.org/data/2.5/weather?q=${state.city}&units=metric&appid=${API_KEY}`;\r\n\r\n      axios\r\n        .get(URL)\r\n        .then((response) => {\r\n          const { data } = response;\r\n\r\n          setCurrentWeather({\r\n            icon: data.weather[0].icon,\r\n            main: data.weather[0].main,\r\n            timezone: calcTime(data.timezone),\r\n            mainTemp: Math.round(data.main.temp),\r\n            // warning: showWarning(34, 24),\r\n            warning: showWarning(\r\n              Math.round(data.main.temp_min),\r\n              Math.round(data.main.temp_max)\r\n            ),\r\n            temp: {\r\n              min: Math.round(data.main.temp_min),\r\n              max: Math.round(data.main.temp_max),\r\n            },\r\n          });\r\n\r\n          setTimeout(() => {\r\n            keepCalling();\r\n          }, 1200000); // 20min\r\n        })\r\n        .catch(() => {\r\n          setTimeout(() => {\r\n            keepCalling();\r\n          }, 1200000);\r\n        });\r\n    };\r\n\r\n    keepCalling();\r\n  }, [state.city]);\r\n\r\n  /**\r\n   * Make API call\r\n   */\r\n  const makeCall = useCallback(() => {\r\n    return new Promise((resolve, reject) => {\r\n      const URL = `https://api.openweathermap.org/data/2.5/forecast?q=${state.city}&units=metric&appid=${API_KEY}`;\r\n\r\n      axios\r\n        .get(URL)\r\n        .then((response) => {\r\n          const { data } = response;\r\n\r\n          // Check if we got a good response, which is 200\r\n\r\n          if (data.cod === \"200\") {\r\n            // Don't retry, everything is good\r\n\r\n            resolve(false);\r\n\r\n            const arr = data.list.filter((e) => {\r\n              const val = e.dt_txt.split(\" \")[1];\r\n              return val === \"00:00:00\" || val === \"12:00:00\";\r\n            });\r\n\r\n            // Sort data according matching days\r\n\r\n            const matching = [];\r\n\r\n            arr.forEach((value) => {\r\n              // take date\r\n              const date = value.dt_txt.split(\" \")[0];\r\n\r\n              if (matching[date]) {\r\n                matching[date].push(value);\r\n              } else {\r\n                matching[date] = [value];\r\n              }\r\n            });\r\n\r\n            // convert to proper array\r\n\r\n            let toArray = Object.entries(matching);\r\n            toArray = toArray.filter((e) => {\r\n              return e[1].length !== 1;\r\n            });\r\n\r\n            const finalData = [];\r\n\r\n            toArray.forEach((value) => {\r\n              const itemData = {};\r\n\r\n              value[1].forEach((itemValue) => {\r\n                const time = itemValue.dt_txt.split(\" \")[1];\r\n\r\n                const roundTemp = Math.round(itemValue.main.temp);\r\n\r\n                const dataCons = {\r\n                  temp: roundTemp,\r\n                  mainTemp: roundTemp,\r\n                  weather: itemValue.weather[0],\r\n                };\r\n\r\n                if (time === \"12:00:00\") {\r\n                  itemData[\"high\"] = dataCons;\r\n                } else {\r\n                  itemData[\"low\"] = dataCons;\r\n                }\r\n              });\r\n\r\n              finalData.push({\r\n                date: value[0],\r\n                data: itemData,\r\n              });\r\n            });\r\n\r\n            setWeather(finalData);\r\n          } else {\r\n            // Retry\r\n\r\n            resolve(true);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          // Retry\r\n\r\n          resolve(true);\r\n        });\r\n    });\r\n  }, [state.city]);\r\n\r\n  /**\r\n   * Exponetially delay re-try periods, until successful\r\n   *\r\n   * @param {Function} apiCaller - makes api call\r\n   * @param {number} delay - a deplay timer for re-retrying\r\n   */\r\n  const loopCall = useCallback(\r\n    async (apiCaller, delay) => {\r\n      const retry = await apiCaller().then((response) => {\r\n        return response;\r\n      });\r\n\r\n      if (retry) {\r\n        if (delay <= 16000) {\r\n          console.log(\"Next delay\", delay);\r\n\r\n          setShowRetry(true);\r\n\r\n          setRemainingTime(delay);\r\n\r\n          const timer = setTimeout(() => {\r\n            if (retrying) {\r\n              setRetrying(false);\r\n              clearTimeout(timer);\r\n            } else {\r\n              loopCall(apiCaller, delay * 2);\r\n            }\r\n          }, delay);\r\n        } else {\r\n          console.log(\"Just stop trying.\");\r\n          setError(true);\r\n          setShowRetry(false);\r\n          setRemainingTime(0);\r\n        }\r\n      } else {\r\n        setShowRetry(false);\r\n        setRemainingTime(0);\r\n      }\r\n    },\r\n    [retrying]\r\n  );\r\n\r\n  const onRetry = () => {\r\n    setRetrying(true);\r\n    setShowRetry(false);\r\n\r\n    makeCall().then((response) => {\r\n      return response;\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    loopCall(makeCall, 2000);\r\n  }, [loopCall, state.city, makeCall]);\r\n\r\n  const onSearchSubmit = (city) => {\r\n    setState({ city, tempUnits: \"celsius\", tempSymbol: \"°C\" });\r\n  };\r\n\r\n  const toCelsius = (fahrenheit) => {\r\n    return Math.round((fahrenheit - 32) * (5 / 9));\r\n  };\r\n\r\n  const toFahrenheit = (celsius) => {\r\n    return Math.round(celsius * (9 / 5) + 32);\r\n  };\r\n\r\n  const converter = (temp, type) => {\r\n    if (type !== \"celsius\") {\r\n      return toFahrenheit(temp);\r\n    }\r\n\r\n    return toCelsius(temp);\r\n  };\r\n\r\n  const onValueChange = (e) => {\r\n    const value = e.target.value;\r\n\r\n    let symbol = \"°C\";\r\n\r\n    if (value !== \"celsius\") {\r\n      symbol = \"°F\";\r\n    }\r\n\r\n    /**\r\n     * Convert current weather\r\n     * @var Object\r\n     */\r\n    const calCurrent = {\r\n      icon: currentWeather.icon,\r\n      main: currentWeather.main,\r\n      mainTemp: converter(currentWeather.mainTemp, value),\r\n      timezone: currentWeather.timezone,\r\n      temp: {\r\n        min: converter(currentWeather.temp.min, value),\r\n        max: converter(currentWeather.temp.max, value),\r\n      },\r\n    };\r\n\r\n    setCurrentWeather(calCurrent);\r\n\r\n    /**\r\n     * Convert weather array data\r\n     * @var array\r\n     */\r\n\r\n    const changeWeather = weather.map((objValue) => {\r\n      const val = objValue;\r\n\r\n      if (val.data.high !== undefined) {\r\n        val.data.high.temp = converter(val.data.high.temp, value);\r\n      }\r\n\r\n      if (val.data.low !== undefined) {\r\n        val.data.low.temp = converter(val.data.low.temp, value);\r\n      }\r\n\r\n      return val;\r\n    });\r\n\r\n    setWeather(changeWeather);\r\n\r\n    setState({ ...state, tempSymbol: symbol, tempUnits: value });\r\n  };\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <SearchForm onSubmit={onSearchSubmit} />\r\n      <h1 className=\"main-card-header\">\r\n        Weekly weather forecast in {state.city}\r\n      </h1>\r\n      <div className=\"options-container\">\r\n        <label htmlFor=\"celsius\">\r\n          <input\r\n            onChange={onValueChange}\r\n            type=\"radio\"\r\n            id=\"celsius\"\r\n            checked={state.tempUnits === \"celsius\"}\r\n            value=\"celsius\"\r\n          />\r\n          <div>Celsius</div>\r\n        </label>\r\n        <label htmlFor=\"fahrenheit\">\r\n          <input\r\n            onChange={onValueChange}\r\n            type=\"radio\"\r\n            id=\"fahrenheit\"\r\n            checked={state.tempUnits === \"fahrenheit\"}\r\n            value=\"fahrenheit\"\r\n          />\r\n          <div>Fahrenheit</div>\r\n        </label>\r\n      </div>\r\n      <div className=\"sub-info-datatitle\">\r\n        Current Weather Today, {currentWeather.timezone}\r\n      </div>\r\n      <div className=\"weather-warning\">{currentWeather.warning}</div>\r\n      <div className=\"currentWeather\">\r\n        <div className=\"main-info\">\r\n          <div className=\"temp-measurement\">{currentWeather.mainTemp}</div>\r\n          <div className=\"temp-unit\">\r\n            {state.tempUnits === \"celsius\" ? \"°C\" : \"°F\"}\r\n          </div>\r\n        </div>\r\n        <div className=\"sub-info\">\r\n          <div className=\"sub-info-text\">{currentWeather.main}</div>\r\n    \r\n          <div className=\"sub-info-text\">\r\n            \r\n            <span className=\"max-temp\">\r\n              <i className=\"mdi mdi-arrow-up\" />\r\n              {`${currentWeather.temp.min} ${state.tempSymbol}`}\r\n            </span>\r\n            <span className=\"min-temp\">\r\n              <i className=\"mdi mdi-arrow-down\" />\r\n              {`${currentWeather.temp.max} ${state.tempSymbol}`}\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <WeatherList\r\n        error={error && !showRetry}\r\n        weather={weather}\r\n        units={state.tempSymbol}\r\n      />\r\n      {showRetry && (\r\n        <div className=\"retry-container\">\r\n          <button className=\"retry-btn\" onClick={onRetry}>\r\n            Retry now\r\n          </button>\r\n          <div>{`Retrying in ${remainingTime / 1000} sec.`}</div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport WeatherCard from \"./components/WeatherCard\";\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <WeatherCard />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}